#!/usr/bin/python

# In the future the assembler will be written in my assembly language then transformed 
# into machine language that runs on my simulated cpu via this program. Then it will 
# be able to run in my operating systemâ€™s environment 

import sys

INSTRUCTION_BITS = 5
ARG2_BITS = 5
ARG1_BITS = 19
ARG1_SIZE = (2**ARG1_BITS)-1

func_table = {
    "add": 0,
    "sub": 1,
    "mul": 2,
    "div": 3,
    "movb": 4,
    "movd": 5,
    "and": 6,
    "or": 7,
    "xor": 8,
    "not": 9,
    "compd": 10,
    "compb": 11,
    "jeq": 12,
    "jlt": 13,
    "jgt": 14,
    "jne": 15,
    "jmp": 16,
    "pushb": 17,
    "pushd": 18,
    "pop": 19,
    "int": 20
}

reg_names = {
    "r0": 1,
    "r1": 2,
    "r2": 3,
    "r3": 4,
    "r4": 5,
    "r5": 6,
    "r6": 7,
    "r7": 8,
    "r8": 9,
    "r9": 10,
    "rpc": 11,
    "rsp": 12,
    "rsb": 13,
    "rcf": 14,
    "rfg1": 15,
    "rfg2": 16,
    "ra1": 17,
    "ra2": 18,
    "rek": 19,
    "rjo": 20,
}

constants = {
    "STDIN": 1
}

label_dict = {}

def main ():

    if(len(sys.argv) < 3 or len(sys.argv) > 3):
        print("Usage: python3 assembler.py {file} {out}")
        exit(1)

    
    convert_labels() # converts labels to numbers
    assemble_no_labels() # assembles

    #open(sys.argv[2], 'w').write(assembled)

def assemble_no_labels():
    f = open(sys.argv[2], 'r')
    bits = []

    for i in f.readlines():
        # convert constants
        for e in constants.keys():
            if(e in i):
                i = i.replace(e, str(constants[e]))


        if(len(i) <= 1):
            continue

        if i.startswith("//"):
            continue

        curstr = ""
        curstr += get_instruction_bits(i)
        curstr += get_arg1_bits(i)
        curstr += get_arg2_bits(i)

        bits.append(curstr)
    f.close()

    write_bits_out(bits)


def get_instruction_bits(text):
    out = ""
    space = text.find(" ")

    instruction = text[0:space]
    out = str(bin(func_table[instruction]))[2:].zfill(INSTRUCTION_BITS) # convert instruction to binary of 5 bits

    return out

def get_arg1_bits(text):
    out = ""
    space = text.find(" ")
    comma = text.find(",")

    arg1 = text[space+1:comma]
    
    if(arg1[0] == "[" and arg1[-1] == "]"):
        arg1 = arg1[1:-1]
        if(arg1 in reg_names.keys()):
            out += "10"
            out += str(bin(reg_names[arg1])[2:].zfill(ARG1_BITS))
        else:
            out += "11"
            out += str(bin(int(arg1)))[2:].zfill(ARG1_BITS)
        
    elif(arg1 in reg_names.keys()):
        out += '00'
        out += str(bin(reg_names[arg1])[2:].zfill(ARG1_BITS))
    else:   
        if(int(arg1) > ARG1_SIZE):
            print(f"Arg1 number exceeds limit of {ARG1_SIZE}")
            exit(1)
        out += '01'
        out += str(bin(int(arg1)))[2:].zfill(ARG1_BITS)
    
    return out

def get_arg2_bits(text:str):
    out = ""
    comma = text.find(",")

    if(comma != -1):
        arg2 = text[comma+1: len(text.rstrip())]
        
        if(arg2.startswith("[") and arg2.endswith("]")):
            arg2 = arg2[1:-1]
            out += "1"
        else:
            out += "0"

        out += str(bin(reg_names[arg2]))[2:].zfill(ARG2_BITS)

    else:
        out += "0"*6
    return out

def write_bits_out(bits):
    f = open(sys.argv[2],'w')
    # split 4 byte operation into 1 byte
    for bit_str in (bits):
        bytes_data = []
        for i in range(0,len(bit_str),8):
            bytes_data.append(bit_str[i:i+8])

            #  reverse order        
        bytes_data.reverse()

        for i in bytes_data:
            f.write(i + "\n")
    f.close()


def convert_labels():
    lines = []
    with open(sys.argv[1], 'r') as f:
        for i in f.readlines():
            lines.append(i)
        f.close()

    # add labels to label dict and remove them from lines list
    line_count = 0
    lines_new = []
    for j in lines:
        j = str(j)
        j = j.strip()

        if(j.strip() == ''): # ignore white space
            continue

        if(j.startswith)("//"):
            continue

        tmp = j.find("//")
        if(tmp != -1):
            j = j[0:tmp]

        if(j.endswith(":")):
            label = j[0:-1] 
            if label in label_dict.keys(): # check if label has already been defined
                print(f"Two definitions of label {label}")
                exit(1)
            else:
                label_dict[label] = line_count
        else:
            lines_new.append(j) # if not a label add to new line list and increment line count
            line_count+=1

    file = open(sys.argv[2], 'w')
    for i in lines_new:        
        if(len(label_dict) <= 0):
            file.write(i + "\n")
            continue

        for j in label_dict.keys():

            if j in i:
                file.write(i.replace(j, str(label_dict[j])) + "\n")
            else: 
                file.write(i + "\n")
    file.close()

        


if __name__ == "__main__":
    main()