Either implement simple segmentation memory system that every so often for undecided reasons
will rearrange itself to reduce external fragmentation:

pros:
simple
faster

cons:
not expandable
and re arranging memory takes a long time (but does not happen often)


or go for the multi level page table approach:

pros:
reduce external fragmentation,
educationally beneficial

cons:
complex
slower

Plan:
I will first implement segmentation with some sort of system that will decide when to rearrange memory.
Maybe An algorithm that checks when too much small free space exists and when it exceeds an arbitrary
number the memory will be rearranged. If segmentation dosent work too well then I will try the other approach.
Although for a small simple operating system such as this one I dont think there should be a problem.


Segmentation is simple when a program begins give it a fixed amount of space for it to store program code, stack, and heap.
If the program exceeds the given space grow downwards if available and if not reallocate it in a big chunk of free space.
